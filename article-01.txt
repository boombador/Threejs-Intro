Programming with 3D graphics can be very interesting, but often there is a large amount of alien looking boilerplate code needed to even open a window for rendering. A simple visualization of a rotating cube can appear inscrutable to the uninitiated. Luckily several libraries exist that do a good job of hiding the complexity while remaining fairly flexible, and one such library that I've become fairly fond of is Three.js.

Three.js is a javascript API for 3D graphics in the browser, relying on the canvas element or the faster (but less supported) WebGL API. In this article I will walk you through the steps needed to set up a very basic but extensible Three.js app, while explaining at a high level some of the basic concepts in computer graphics. This is aimed at developers who know little to nothing about graphics programming but are somewhat familiar with web development. Please enjoy :)

<h3>Setting the Scene</h3>

First you need a copy of Three.js. You can download the full package <a href="http://threejs.org/">here</a>. You can find the actual library in the build folder, link it with a script tag on the page you're going to be writing your app on. Now, let's dive into code:

<pre>
var scene = new THREE.Scene(); // the scene object contains a reference to everything in our digital world

// calculate screen dimensions
var margin = 30;
var width = window.innerWidth - 2*margin;
var height = window.innerHeight - 2*margin;

// the camera object keeps track of the visual reference point of the scene
// it also defines certain visual parameters analogous to those present in
// real cameras
var camera = new THREE.PerspectiveCamera(
    75,         // angle of the FOV, a large angle is like a wide angle lens
    width / height, // the aspect ratio of the screen
    0.1,        // objects closer than this won't be picked up by the camera
    1000        // objects further than this won't be either
);
</pre>

Now we've created the scene and the camera. By manipulating the parameters of the camera and adding 3D meshes to the scene we can define what we want to display, and through the process of rendering these representations are used to calculate the two dimensional image that will be drawn to the browser canvas. Three.js fortunately hides a lot of the math needed to do this rendering process in a helpful wrapper object:

<pre>
// here we set up some of the basics of the renderer, later we'll use it to draw the scene
var renderer = new THREE.WebGLRenderer(); // the webgl implementation is faster if it's supported on your browser
// var renderer = new THREE.CanvasRenderer(); // use this line instead if your browser doesn't suppor WebGL
renderer.setSize( width, height );
document.body.appendChild( renderer.domElement );
renderer.domElement.style.marginLeft = margin + 'px';
</pre>

<h3>Creating Objects</h3>

Now we have the bones of a scene, but a blank screen isn't very interesting. Let's start with a simple cube and eventually we'll add some controls to move it around.

<pre>
var cubeGeometry = new THREE.CubeGeometry(1,1,1); // a cube of side length one
green = new THREE.MeshBasicMaterial( { color: 0x00ff00 } ); // a simple green material
var cube = new THREE.Mesh( cubeGeometry, green );
scene.add( cube );
</pre>

In 3D graphics one of the simplest and most common methods to represent objects is to define a set of triangles that are connected to form a surface that approximates the underlying object. Graphics hardware has been heavily optimized to quickly render triangles, so even though algorithms to render arbitrary flat polygons exist they are seldom used. Three.js gets the jargon a little wrong here, technically this geometry object is a full mesh because it defines the geometry (coordinates) and topology (connecting edges) of the vertices, but I'll try to stay consistent with the language of the code to reduce confusion.

In addition to a geometry object we need a material, which in graphics is a mathematical description of how light interacts with a surface. Simple materials are usually defined at the vertices and values on the triangle surface are interpolated from the corners. Here we just defined a color and let Three.js pick sensible defaults for several other parameters that I won't get into here. Now that we have a cube to control let's also add a little wall to help keep us oriented.

<pre>
var red = new THREE.MeshBasicMaterial( { color: 0xff0000 } );
var cylinderGeometry = new THREE.CylinderGeometry( 10, 10, .5, 32, 10, true );
var wall = new THREE.Mesh( cylinderGeometry, red );
wall.material.side = THREE.DoubleSide; // render back of faces as well
scene.add( wall );
</pre>

<h3>Rendering</h3>

So we've created a cube and added it to the scene, but still our screen is blank because we haven't
told the renderer to do anything. Let's fix that now:

<pre>
// let's move the camera from it's default position at the origin and point
// it back there to get a good look at the cube
var origin = new THREE.Vector3( 0, 0, 0 );
camera.position.y = 5;
camera.position.x = 13;
camera.lookAt(origin);

function render() {
    requestAnimationFrame(render); // ask browser to call render function before drawing screen
    renderer.render(scene, camera); // convert scene to a 2D image from the camera's perspective
}
render();
</pre>

It's common for 3D applications to have some main loop that encapsulates all the logic of the system, updates the scene, then renders it. We accomplish this here by using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame">requestAnimationFrame</a> function. This tells the browser to call the passed function before repainting the screen, so your logic is only getting executed as fast as the browser can handle it. This uncertainty in execution time means you should keep track of how much time passes between loop iterations so you can keep actions consistent, otherwise your application will jerk and lag as your CPU becomes overburdened. Look for an implementation of this in later articles.

<h3>User Input</h3>

At this point, we have a sad looking cube just sitting within the little wall. It is technically being animated, but the cube is not moving so we can't tell that anything is happening. What would make this interesting would be user input, and for that I've used a relatively simple keyboard module that you can use to augment Three.js.

<pre>
var keyboard = new THREEx.KeyboardState();
</pre>

Once we have the keyboard listener we can add some logic to the main loop by updating our render function like so:

<pre>
var mapRadius = 10
var speed = .05; // adjust this movement speed to taste

function render() {
    if (cube.position.length() > mapRadius) {
        // cube is outside of the mapRadius
        console.log("He was a good cube, he shall be missed.");
        return;
    }
    requestAnimationFrame(render);
    if( keyboard.pressed( "left" )) {
        cube.rotation.y += .1;
    }
    if( keyboard.pressed( "right" )) {
        cube.rotation.y += -.1;
    }
    if( keyboard.pressed( "space" )) {
        // calculate new position based on orientation
        var rot = cube.rotation.y;
        var x = speed * Math.cos(rot);
        var z = speed * Math.sin(rot);
        cube.position.x += z;
        cube.position.z += x;
    }
    renderer.render(scene, camera);
}
</pre>

Now we can rotate the cube with the left and right arrow keys and press the spacebar to move it forward. You can tweak the values here if rotation or forward motion is too fast, but as I mentioned earlier the "correct" solution in this case would be track how much time has passed between loop executions so you can calculate the movement delta based on constants with some physical significance.

But I think this is a good place to stop for now. We have an extremely basic but extensible 3D app, and in upcoming posts I will delve deeper into the capabilities of Three.js and graphics in general. You can check out the project on <a href="https://github.com/boombador/BotWorld">GitHub</a> where it is set up as a node app for ease of demonstration. Look at the public/javascript folder to see the relevant Three.js code. Since development will continue, this article may not resemble the project but if you go back in the history you can find the code snippets above.

